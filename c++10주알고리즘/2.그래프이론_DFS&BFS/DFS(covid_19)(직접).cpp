/*
*   DFS 예시문제 : 1
*   코로나 바이러스
*   종화는 코로나 바이러스에 감염되었다. 종화는 현재 배를 타고 한국으로 돌아오고 있었고, 
*   종화가 육지에 발을 디딛는 순간 종화와 연결된 육지는 모두 코로나 바이러스가 퍼진다. 
*   (바다에서는 코로나 바이러스가 퍼지지 않는다.)
*   이때 종화가 최소한 몇 번 이동해야 모든 육지에 코로나 바이러스를 퍼트릴 수 있는지 말해보자 
*   1은 육지이며 0은 바다를 가리킨다. 
*
*   입력
*   맵의 세로길이 N과 가로길이 M이 주어지고 이어서 N * M 의 맵이 주어진다.
*
*   출력
*   종화가 최소 몇 번 이동해야 모든 육지에 코로나 바이러스가 퍼지는지 출력해라 (4아닌가)
*
*   범위
*   1 <= N <= 100
*   1 <= M <= 100
*
*   예제입력
*   5 5   
*   1 0 1 0 1
*   1 1 0 0 1
*   0 0 0 1 1
*   0 0 0 1 1
*   0 1 0 0 0
*   
*   출력
*   4 
*/

//맵 3.cpp의 방법을 이용하자 
//또한 map이니까 인접행렬로 구현하자 (인접행렬은 이중포문)
#include <iostream>

using namespace std;

int n, m, num;
bool visited[100][100];
int adj[100][100];

int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};

int go(int y, int x){
    
    visited[y][x] = 1; //방문했다고 표시
    cout << y << " : " << x << "\n";

    for(int i=0; i<4; i++) // 4방향으로 탐색
    {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if((ny>=0 && ny<n && nx>= 0 && nx < m) && !visited[ny][nx] && adj[ny][nx] == 1) //내가 구현한 코드
            go(ny, nx);
    }
}

int main() {

    cin >> n >> m;

    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> adj[i][j];
        }
    }

    //go(0,0); 이런식으로 하면 0,0부터 고정이기 때문에 한군데 영역만 파악 가능

      for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(visited[i][j] == 0){ //아직 방문하지 않았다면 
             go(i,j);             
             num ++;
            }
        }
    }

    cout << num <<'\n';
    return 0;
}